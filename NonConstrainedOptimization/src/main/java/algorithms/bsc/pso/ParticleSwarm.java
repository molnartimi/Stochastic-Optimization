package algorithms.bsc.pso;import java.util.ArrayList;import java.util.List;import java.util.Random;import org.apache.commons.math3.linear.MatrixUtils;import org.apache.commons.math3.linear.RealVector;import algorithms.Optimizer;import hu.bme.mit.inf.petridotnet.spdn.SpdnException;import models.Model;import spdn.SPDNResult;import spdn.SPDN;public class ParticleSwarm extends Optimizer<PSOHyperParam> {	public static final String ID = "PSOP";			protected RealVector bestPoint = null;	protected double bestValue;		public ParticleSwarm(Model model) {		super(model);	}	protected class Particle {		private RealVector x;		private RealVector v;		private RealVector PBestPoint;		private double PBestValue;		public Particle(RealVector pos, RealVector vel) {			x = pos;			PBestPoint = x.copy();			v = vel;			try {				PBestValue = spdn.f(PBestPoint);			} catch (SpdnException e) {				PBestValue = 1000000;			}		}		public RealVector getLocalBestPoint() {			return PBestPoint;		}		public double getLocalBestValue() {			return PBestValue;		}		public RealVector getV() {			return v;		}		public RealVector getX() {			return x;		}		public void step(RealVector newX, RealVector newV) {			x = newX.copy();			v = newV.copy();			try {				double value = spdn.f(x);				if (value < PBestValue) {					PBestValue = value;					PBestPoint = x.copy();				}			} catch (SpdnException e) {				// Don't refresh best point.			}		}	}	public SPDNResult optimize(PSOHyperParam params) {		long startTime = System.nanoTime();				List<Particle> swarm = initSwarm(params.swarmSize);		for (int i = 0; i < params.maxIter; i++) {			for (int j = 0; j < params.swarmSize; j++) {				Particle p = swarm.get(j);				stepParticle(p, params.omega, params.fiParticle, params.fiGlobal);				if (bestValue > p.getLocalBestValue()) {					bestValue = p.getLocalBestValue();					bestPoint = p.getLocalBestPoint().copy();				}			}		}				SPDNResult result = new SPDNResult(bestValue, SPDN.convertPoint(bestPoint).toArray(), ID, params.getHyperParams(), model);		result.setTime(System.nanoTime() - startTime);		result.writeToCsv();		spdn.writeCountedDataToCsv(ID);		return result;	}		protected void stepParticle(Particle p, double omega, double fiParticle, double fiGlobal) {		Random r = new Random();				RealVector x = p.getX().copy();		RealVector v = p.getV().copy();		RealVector best = p.getLocalBestPoint().copy();		for (int d = 0; d < spdn.getDimension(); d++) {			v.setEntry(d, omega * v.getEntry(d) + fiParticle * r.nextDouble() * (best.getEntry(d) - x.getEntry(d))					+ fiGlobal * r.nextDouble() * (bestPoint.getEntry(d) - x.getEntry(d)));			x.setEntry(d, x.getEntry(d) + v.getEntry(d));		}		p.step(x, v);	}		protected List<Particle> initSwarm(int swarmSize) {		List<Particle> swarm = new ArrayList<>();				for (int i = 0; i < swarmSize; i++) {			RealVector pos = MatrixUtils.createRealVector(model.getRandomPoint());			RealVector vel = MatrixUtils.createRealVector(model.getRandomVelocity());			Particle p = new Particle(pos, vel);			swarm.add(p);			if (bestPoint == null || p.getLocalBestValue() < bestValue) {				bestPoint = pos.copy();				bestValue = p.getLocalBestValue();			}		}		return swarm;	}	}